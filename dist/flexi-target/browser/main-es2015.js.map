{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/weather-report/weather-report.component.ts","./src/app/weather-report/weather-report.component.html","./src/app/weather.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subject, Observable } from 'rxjs';\nimport { takeUntil, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  private unsubscribe$ = new Subject<void>();\n\n  countries = [\n    {\n      name: 'India',\n      cities: ['Delhi', 'Mumbai', 'Bengaluru', 'Donimalai', 'Bellary'],\n    },\n    {\n      name: 'United Kingdom',\n      cities: ['London', 'Warwick', 'Birmingham', 'manchester'],\n    },\n    {\n      name: 'United States',\n      cities: ['New York', 'Chicago', 'Washington'],\n    },\n    {\n      name: 'Australia',\n      cities: ['Sydney', 'Adelaide', 'Melbourne'],\n    },\n  ];\n\n  countryControl: FormControl;\n  cityControl: FormControl;\n\n  cities$: Observable<string>;\n\n  constructor(private router: Router) {}\n\n  ngOnInit() {\n    this.cityControl = new FormControl('');\n    this.cityControl.valueChanges\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((value) => {\n        this.router.navigate([value]);\n      });\n\n    this.countryControl = new FormControl('');\n\n    this.cities$ = this.countryControl.valueChanges.pipe(\n      map((country) => country.cities)\n    );\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\n","<mat-toolbar color=\"primary\">\n  Flexi-Target &#9925;\n</mat-toolbar>\n<div class=\"content\">\n  <div class=\"flex-row\">\n    <div class=\"bg-white\">\n    <mat-form-field class=\"mr\">\n      <mat-label class=\"selectName\">Select country</mat-label>\n      <mat-select [formControl]=\"countryControl\">\n        <mat-option *ngFor=\"let country of countries\" [value]=\"country\">\n          {{country.name}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label class=\"selectName\">Select city</mat-label>\n      <mat-select [formControl]=\"cityControl\">\n        <mat-option *ngFor=\"let city of cities$ | async\" [value]=\"city\">\n          {{city}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    </div>\n  </div>\n\n  <br />\n  <router-outlet></router-outlet>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport { WeatherReportComponent } from './weather-report/weather-report.component';\nimport { HttpClientModule } from '@angular/common/http';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WeatherReportComponent\n  },\n  {\n    path: ':locationName',\n    component: WeatherReportComponent\n  }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent, WeatherReportComponent\n  ],\n  imports: [\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatCardModule,\n    MatToolbarModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    RouterModule.forRoot(routes, {\r\n    initialNavigation: 'enabled'\r\n}),\n    MatProgressBarModule,\n    HttpClientModule,\n    MatButtonModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { WeatherService } from '../weather.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, filter, concatMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-weather-report',\n  templateUrl: './weather-report.component.html',\n  styleUrls: ['./weather-report.component.scss'],\n})\nexport class WeatherReportComponent implements OnInit {\n  data$: Observable<any>;\n\n  today: Date = new Date();\n\n  loading = true;\n\n  constructor(\n    private weatherService: WeatherService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.data$ = this.route.params.pipe(\n      map((params) => params.locationName),\n      filter((name) => !!name),\n      tap(() => {\n        this.loading = true;\n      }),\n      concatMap((name) => this.weatherService.getWeatherForCity(name)),\n      tap(() => {\n        this.loading = false;\n      })\n    );\n    this.loading = true;\n  }\n}\n","<mat-card class=\"mat-elevation-z5\" *ngIf=\"data$ | async as data\">\n        <div *ngIf=\"loading\" mode=\"indeterminate\" class=\"gif-bg\" >\n        </div>\n        <div *ngIf=\"!loading\" >\n    <mat-card-header>\n        <mat-card-title>{{data.name}}'s weather</mat-card-title>\n        <mat-card-subtitle>Today: {{today | date }}</mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n        <div class=\"flex-row\">\n            <div class=\"temp\">\n                <span class=\"big-text\">{{data.main.temp | number:'0.0-0'}} C</span>\n                <span>Feels like </span>\n                <span>{{data.main.feels_like | number: '0.0-0'}} C</span>\n            </div>\n            <div class=\"outlook\">\n                <img [src]=\"data.image\" class=\"image\" />\n                <span>{{data.weather[0].description | titlecase}}</span>\n            </div>\n        </div>\n    </mat-card-content>\n    <mat-card-actions>\n        <button mat-button >LIKE</button>\n        <button mat-button>SHARE</button>\n    </mat-card-actions>\n</div>\n</mat-card>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, delay } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class WeatherService {\n  constructor(private http: HttpClient) {}\n\n  getWeatherForCity(city: string): Observable<any> {\n    const path = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=695ed9f29c4599b7544d0db5c211d499`;\n    return this.http.get<any>(path).pipe(\n      map((data) => ({\n        ...data,\n        image: `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`,\n      })),\n      delay(3000)\n    );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  platformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n});\n"],"sourceRoot":"webpack:///"}