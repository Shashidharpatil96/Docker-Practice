{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/weather-report/weather-report.component.ts","webpack:///src/app/weather-report/weather-report.component.html","webpack:///src/app/weather.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","router","unsubscribe$","countries","name","cities","cityControl","valueChanges","pipe","subscribe","value","navigate","countryControl","cities$","country","next","complete","selector","templateUrl","styleUrls","routes","path","component","AppModule","withServerTransition","appId","forRoot","initialNavigation","declarations","imports","providers","bootstrap","WeatherReportComponent","weatherService","route","today","Date","loading","data$","params","locationName","getWeatherForCity","WeatherService","http","city","get","data","image","weather","icon","providedIn","environment","production","document","addEventListener","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subject, Observable } from 'rxjs';\nimport { takeUntil, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  private unsubscribe$ = new Subject<void>();\n\n  countries = [\n    {\n      name: 'India',\n      cities: ['Delhi', 'Mumbai', 'Bengaluru', 'Donimalai', 'Bellary'],\n    },\n    {\n      name: 'United Kingdom',\n      cities: ['London', 'Warwick', 'Birmingham', 'manchester'],\n    },\n    {\n      name: 'United States',\n      cities: ['New York', 'Chicago', 'Washington'],\n    },\n    {\n      name: 'Australia',\n      cities: ['Sydney', 'Adelaide', 'Melbourne'],\n    },\n  ];\n\n  countryControl: FormControl;\n  cityControl: FormControl;\n\n  cities$: Observable<string>;\n\n  constructor(private router: Router) {}\n\n  ngOnInit() {\n    this.cityControl = new FormControl('');\n    this.cityControl.valueChanges\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((value) => {\n        this.router.navigate([value]);\n      });\n\n    this.countryControl = new FormControl('');\n\n    this.cities$ = this.countryControl.valueChanges.pipe(\n      map((country) => country.cities)\n    );\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\n","<mat-toolbar color=\"primary\">\n  Flexi-Target &#9925;\n</mat-toolbar>\n<div class=\"content\">\n  <div class=\"flex-row\">\n    <div class=\"bg-white\">\n    <mat-form-field class=\"mr\">\n      <mat-label class=\"selectName\">Select country</mat-label>\n      <mat-select [formControl]=\"countryControl\">\n        <mat-option *ngFor=\"let country of countries\" [value]=\"country\">\n          {{country.name}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label class=\"selectName\">Select city</mat-label>\n      <mat-select [formControl]=\"cityControl\">\n        <mat-option *ngFor=\"let city of cities$ | async\" [value]=\"city\">\n          {{city}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    </div>\n  </div>\n\n  <br />\n  <router-outlet></router-outlet>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport { WeatherReportComponent } from './weather-report/weather-report.component';\nimport { HttpClientModule } from '@angular/common/http';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WeatherReportComponent\n  },\n  {\n    path: ':locationName',\n    component: WeatherReportComponent\n  }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent, WeatherReportComponent\n  ],\n  imports: [\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatCardModule,\n    MatToolbarModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    RouterModule.forRoot(routes, {\r\n    initialNavigation: 'enabled'\r\n}),\n    MatProgressBarModule,\n    HttpClientModule,\n    MatButtonModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { WeatherService } from '../weather.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, filter, concatMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-weather-report',\n  templateUrl: './weather-report.component.html',\n  styleUrls: ['./weather-report.component.scss'],\n})\nexport class WeatherReportComponent implements OnInit {\n  data$: Observable<any>;\n\n  today: Date = new Date();\n\n  loading = true;\n\n  constructor(\n    private weatherService: WeatherService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.data$ = this.route.params.pipe(\n      map((params) => params.locationName),\n      filter((name) => !!name),\n      tap(() => {\n        this.loading = true;\n      }),\n      concatMap((name) => this.weatherService.getWeatherForCity(name)),\n      tap(() => {\n        this.loading = false;\n      })\n    );\n    this.loading = true;\n  }\n}\n","<mat-card class=\"mat-elevation-z5\" *ngIf=\"data$ | async as data\">\n        <div *ngIf=\"loading\" mode=\"indeterminate\" class=\"gif-bg\" >\n        </div>\n        <div *ngIf=\"!loading\" >\n    <mat-card-header>\n        <mat-card-title>{{data.name}}'s weather</mat-card-title>\n        <mat-card-subtitle>Today: {{today | date }}</mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n        <div class=\"flex-row\">\n            <div class=\"temp\">\n                <span class=\"big-text\">{{data.main.temp | number:'0.0-0'}} C</span>\n                <span>Feels like </span>\n                <span>{{data.main.feels_like | number: '0.0-0'}} C</span>\n            </div>\n            <div class=\"outlook\">\n                <img [src]=\"data.image\" class=\"image\" />\n                <span>{{data.weather[0].description | titlecase}}</span>\n            </div>\n        </div>\n    </mat-card-content>\n    <mat-card-actions>\n        <button mat-button >LIKE</button>\n        <button mat-button>SHARE</button>\n    </mat-card-actions>\n</div>\n</mat-card>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, delay } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class WeatherService {\n  constructor(private http: HttpClient) {}\n\n  getWeatherForCity(city: string): Observable<any> {\n    const path = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=695ed9f29c4599b7544d0db5c211d499`;\n    return this.http.get<any>(path).pipe(\n      map((data) => ({\n        ...data,\n        image: `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`,\n      })),\n      delay(3000)\n    );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  platformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n});\n"]}